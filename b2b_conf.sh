#!/bin/bash

# Colors for better readability
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Function to print section headers
print_header() {
    echo -e "\n${BLUE}${BOLD}=== $1 ===${NC}"
}

# Function to check command success
check_success() {
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✓ $1${NC}"
    else
        echo -e "${RED}✗ $1${NC}"
    fi
}

# Check if running as root
if [ "$(id -u)" -ne 0 ]; then
    echo -e "${RED}This script must be run as root!${NC}"
    echo -e "Please run with: sudo $0"
    exit 1
fi

# Store the hostname for later use
HOSTNAME=$(hostname)

print_header "CONFIGURING SSH"
echo -e "${YELLOW}Setting SSH port to 4242...${NC}"
sed -i 's/#Port 22/Port 4242/' /etc/ssh/sshd_config
check_success "SSH port configuration"

echo -e "${YELLOW}Disabling root login via SSH...${NC}"
sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin no/' /etc/ssh/sshd_config
check_success "SSH root login restriction"

echo -e "${YELLOW}Restarting SSH service...${NC}"
systemctl restart ssh
check_success "SSH service restart"

print_header "CONFIGURING UFW FIREWALL"
echo -e "${YELLOW}Enabling UFW...${NC}"
ufw --force enable
check_success "UFW enabled"

echo -e "${YELLOW}Setting up UFW rules...${NC}"
ufw allow 4242/tcp
check_success "SSH port allowed in UFW"

# Check if lighttpd is installed for bonus part
if dpkg -l | grep -q lighttpd; then
    echo -e "${YELLOW}Allowing HTTP port 80 for web server...${NC}"
    ufw allow 80/tcp
    check_success "HTTP port allowed in UFW"
fi

print_header "CONFIGURING PASSWORD POLICY"
echo -e "${YELLOW}Setting password complexity requirements...${NC}"
# Configure PAM for password complexity
cat > /etc/pam.d/common-password << EOF
# Generated by Born2beRoot configuration script
password        requisite                       pam_pwquality.so retry=3 minlen=10 ucredit=-1 dcredit=-1 maxrepeat=3 reject_username difok=7 enforce_for_root
password        [success=1 default=ignore]      pam_unix.so obscure use_authtok try_first_pass sha512
password        requisite                       pam_deny.so
password        required                        pam_permit.so
EOF
check_success "Password complexity configuration"

echo -e "${YELLOW}Setting password aging policy...${NC}"
# Configure password aging
sed -i 's/^PASS_MAX_DAYS.*/PASS_MAX_DAYS   30/' /etc/login.defs
sed -i 's/^PASS_MIN_DAYS.*/PASS_MIN_DAYS   2/' /etc/login.defs
sed -i 's/^PASS_WARN_AGE.*/PASS_WARN_AGE   7/' /etc/login.defs
check_success "Password aging configuration"

print_header "CONFIGURING SUDO"
echo -e "${YELLOW}Setting up sudo policies...${NC}"

# Create sudo log directory
mkdir -p /var/log/sudo
chmod 700 /var/log/sudo

# Create custom sudo configuration
cat > /etc/sudoers.d/sudo_config << EOF
Defaults        passwd_tries=3
Defaults        badpass_message="Incorrect password. Access denied."
Defaults        logfile="/var/log/sudo/sudo.log"
Defaults        log_input,log_output
Defaults        requiretty
Defaults        secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"
EOF
chmod 440 /etc/sudoers.d/sudo_config
check_success "Sudo policy configuration"

print_header "CONFIGURING USER GROUPS"
echo -e "${YELLOW}Setting up user42 group...${NC}"
groupadd -f user42

echo -e "${YELLOW}Please enter username to add to user42 group:${NC}"
read username

if id "$username" &>/dev/null; then
    usermod -aG user42 $username
    usermod -aG sudo $username
    check_success "User $username added to user42 and sudo groups"
else
    echo -e "${RED}User $username does not exist. Please create the user first.${NC}"
fi

print_header "CREATING MONITORING SCRIPT"
echo -e "${YELLOW}Creating monitoring script...${NC}"

# Create monitoring script
cat > /root/monitoring.sh << 'EOF'
#!/bin/bash

# Architecture
ARCH=$(uname -a)

# Physical CPU
PCPU=$(grep "physical id" /proc/cpuinfo | sort | uniq | wc -l)

# Virtual CPU
VCPU=$(grep "processor" /proc/cpuinfo | wc -l)

# RAM
RAM_TOTAL=$(free -m | awk '$1 == "Mem:" {print $2}')
RAM_USED=$(free -m | awk '$1 == "Mem:" {print $3}')
RAM_PERCENT=$(free | awk '$1 == "Mem:" {printf("%.2f"), $3/$2*100}')

# Disk
DISK_TOTAL=$(df -BG | grep '^/dev/' | grep -v '/boot$' | awk '{dt += $2} END {print dt}')
DISK_USED=$(df -BM | grep '^/dev/' | grep -v '/boot$' | awk '{du += $3} END {print du}')
DISK_PERCENT=$(df -BM | grep '^/dev/' | grep -v '/boot$' | awk '{du += $3; dt += $2} END {printf("%d"), du/dt*100}')

# CPU Load
CPU_LOAD=$(top -bn1 | grep '^%Cpu' | awk '{printf("%.1f%%"), $2 + $4}')

# Last Boot
LAST_BOOT=$(who -b | awk '$1 == "system" {print $3 " " $4}')

# LVM Check
LVM_ACTIVE=$(if [ $(lsblk | grep "lvm" | wc -l) -gt 0 ]; then echo "yes"; else echo "no"; fi)

# TCP Connections
TCP_CONNECTIONS=$(ss -ta | grep ESTAB | wc -l)

# User Log
USER_LOG=$(users | wc -w)

# Network
IP_ADDR=$(hostname -I | awk '{print $1}')
MAC_ADDR=$(ip link | grep "link/ether" | awk '{print $2}')

# Sudo Commands
SUDO_COMMANDS=$(grep "COMMAND" /var/log/sudo/sudo.log 2>/dev/null | wc -l)

# Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted)
CURRENT_TIME=$(date -u +"%Y-%m-%d %H:%M:%S")

# Current User's Login
CURRENT_USER=$(whoami)

# Display header with ASCII art
echo "#Architecture: $ARCH"
echo "#CPU physical: $PCPU"
echo "#vCPU: $VCPU"
echo "#Memory Usage: $RAM_USED/${RAM_TOTAL}MB ($RAM_PERCENT%)"
echo "#Disk Usage: $DISK_USED/${DISK_TOTAL}GB ($DISK_PERCENT%)"
echo "#CPU load: $CPU_LOAD"
echo "#Last boot: $LAST_BOOT"
echo "#LVM use: $LVM_ACTIVE"
echo "#Connections TCP: $TCP_CONNECTIONS ESTABLISHED"
echo "#User log: $USER_LOG"
echo "#Network: IP $IP_ADDR ($MAC_ADDR)"
echo "#Sudo: $SUDO_COMMANDS cmd"
echo "#Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): $CURRENT_TIME"
echo "#Current User's Login: $CURRENT_USER"
EOF

chmod +x /root/monitoring.sh
check_success "Monitoring script created"

echo -e "${YELLOW}Setting up crontab for monitoring...${NC}"
echo "*/10 * * * * /root/monitoring.sh | wall" > /tmp/crontab_config
crontab -u root /tmp/crontab_config
rm /tmp/crontab_config
check_success "Crontab configuration"

# BONUS PART: Configure Web Server with WordPress
if dpkg -l | grep -q lighttpd; then
    print_header "CONFIGURING WEB SERVER (BONUS)"
    
    echo -e "${YELLOW}Enabling required modules...${NC}"
    lighttpd-enable-mod fastcgi
    lighttpd-enable-mod fastcgi-php
    systemctl restart lighttpd
    check_success "Lighttpd modules enabled"
    
    echo -e "${YELLOW}Configuring MariaDB...${NC}"
    # Configure MariaDB
    systemctl start mariadb
    systemctl enable mariadb
    
    # Secure MariaDB installation (simplified)
    mysql -e "UPDATE mysql.user SET Password=PASSWORD('root_password') WHERE User='root';"
    mysql -e "DELETE FROM mysql.user WHERE User='';"
    mysql -e "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');"
    mysql -e "DROP DATABASE IF EXISTS test;"
    mysql -e "DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';"
    mysql -e "FLUSH PRIVILEGES;"
    check_success "MariaDB configured"
    
    echo -e "${YELLOW}Creating WordPress database...${NC}"
    # Create WordPress database
    mysql -e "CREATE DATABASE wordpress;"
    mysql -e "CREATE USER 'wp_user'@'localhost' IDENTIFIED BY 'wp_password';"
    mysql -e "GRANT ALL PRIVILEGES ON wordpress.* TO 'wp_user'@'localhost';"
    mysql -e "FLUSH PRIVILEGES;"
    check_success "WordPress database created"
    
    echo -e "${YELLOW}Downloading and installing WordPress...${NC}"
    # Download and configure WordPress
    cd /var/www/html
    wget https://wordpress.org/latest.tar.gz
    tar -xzvf latest.tar.gz
    rm latest.tar.gz
    chown -R www-data:www-data /var/www/html/wordpress
    chmod -R 755 /var/www/html/wordpress
    
    # Create WordPress config
    cp /var/www/html/wordpress/wp-config-sample.php /var/www/html/wordpress/wp-config.php
    sed -i "s/database_name_here/wordpress/" /var/www/html/wordpress/wp-config.php
    sed -i "s/username_here/wp_user/" /var/www/html/wordpress/wp-config.php
    sed -i "s/password_here/wp_password/" /var/www/html/wordpress/wp-config.php
    check_success "WordPress installed"
    
    echo -e "${YELLOW}Restarting web services...${NC}"
    systemctl restart lighttpd
    check_success "Web server configuration complete"
    
    echo -e "${GREEN}WordPress is available at http://$HOSTNAME/wordpress${NC}"
    echo -e "${YELLOW}Complete the WordPress setup by visiting that URL${NC}"
fi

# Create a message of the day
print_header "CREATING MESSAGE OF THE DAY"
cat > /etc/motd << EOF
${BLUE}╔════════════════════════════════════════════════════════════╗${NC}
${BLUE}║                BORN2BEROOT SECURE SYSTEM                   ║${NC}
${BLUE}╚════════════════════════════════════════════════════════════╝${NC}

${YELLOW}SYSTEM INFORMATION:${NC}
• Hostname:      $(hostname)
• OS:            Debian GNU/Linux
• Kernel:        $(uname -r)
• SSH Port:      4242
• Firewall:      Active

${RED}SECURITY NOTICE:${NC}
• This system is monitored and all actions are logged
• Password policy requires minimum 10 characters with complexity
• Passwords expire every 30 days as per security policy
• SSH access is restricted to port 4242 with key authentication
• Firewall is enabled and restricting traffic

${GREEN}MONITORING:${NC}
• System statistics displayed every 10 minutes
• Created by 42 student: $(whoami)

${BLUE}╔════════════════════════════════════════════════════════════╗${NC}
${BLUE}║         UNAUTHORIZED ACCESS IS STRICTLY PROHIBITED         ║${NC}
${BLUE}╚════════════════════════════════════════════════════════════╝${NC}
EOF
check_success "MOTD configured"

print_header "CONFIGURATION COMPLETE"
echo -e "${GREEN}✓ All configurations have been applied${NC}"
echo -e "${YELLOW}Run the verification script to check your Born2beRoot environment${NC}"
echo
echo -e "${BOLD}Next step:${NC} sudo ./b2br_verify.sh"
echo
echo -e "${RED}IMPORTANT: You should restart the system for all changes to take effect!${NC}"
